from collections import *

# temps = [('2000', -4.4), ('2001', -2.5), ('2002', -4.4), ('2003', -9.5),
#          ('2004', -8.2), ('2005', -1.6), ('2006', -5.9), ('2007', -2.4),
#          ('2008', -1.7), ('2009', -3.5), ('2010', -12.1), ('2011', -5.8),
#          ('2012', -4.9), ('2013', -6.1), ('2014', -6.9), ('2015', -2.7),
#          ('2016', -11.2), ('2017', -3.9), ('2018', -2.9), ('2019', -6.5),
#          ('2020', 1.5)]
#
# # Напечатайте словарь из температур, отсортированный по уменьшению температуры
#
# ord_temp = OrderedDict(sorted(temps, key = lambda x:x[1], reverse = True))
# print(ord_temp)

# from hidden import users
# # Пишите здесь команды, который помогут
# # найти ответы на вопросы
# from collections import deque
# c = deque(users)
# 
# c.popleft()
# print(c)
# c.rotate(-5)
# print(c.pop())
# print(c.count(8))
#
# ratings = [('Old York', 3.3), ('New Age', 4.6), ('Old Gold', 3.3), ('General Foods', 4.8),
#            ('Belissimo', 4.5), ('CakeAndCoffee', 4.2), ('CakeOClock', 4.2), ('CakeTime', 4.1),
#            ('WokToWork', 4.9), ('WokAndRice', 4.9), ('Old Wine Cellar', 3.3), ('Nice Cakes', 3.9)]
#
# # Отсортируйте список ratings по убыванию рейтинга. Для кафе
# с одинаковым рейтингом отсортируйте кортежи по названию.


# Сохраните данные с рейтингом в словарь cafes, где ключами являются
# названия кафе, а значениями - их рейтинг.

# ratings.sort(key = lambda x: (-x[1], x[0]))
# cafes = OrderedDict(ratings)
# ------------------

# Напишите функцию task_manager, которая принимает список задач для нескольких серверов.
# Каждый элемент списка состоит из кортежа (<номер задачи>, <название сервера>, <высокий приоритет задачи>).
#
# Функция должна создавать словарь и заполнять его задачами по следующему принципу:
# название сервера — ключ, по которому хранится очередь задач для конкретного сервера.
# Если поступает задача без высокого приоритета (последний элемент кортежа — False), добавить номер задачи в конец очереди.
# Если приоритет высокий, добавить номер в начало.
#
# Для словаря используйте defaultdict, для очереди — deque.
#
# Функция возвращает полученный словарь с задачами.

def task_manager(q):
    dq = defaultdict(deque)
    for i in q:
        if i[2]:
            dq[i[1]].appendleft(i[0])
        else:
            dq[i[1]].append(i[0])
    return (dq)



tasks = [(36871, 'office', False),
         (40690, 'office', False),
         (35364, 'voltage', False),
         (41667, 'voltage', True),
         (33850, 'office', False)]

print(task_manager(tasks))
